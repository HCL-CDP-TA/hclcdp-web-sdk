name: Validate Commits

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]
  push:
    branches:
      - main

jobs:
  validate-commits:
    runs-on: ubuntu-latest
    name: Validate Commit Messages
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install commitlint
        run: |
          npm install --save-dev @commitlint/config-conventional @commitlint/cli

      - name: Validate PR commits
        if: github.event_name == 'pull_request'
        run: |
          npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

      - name: Validate current commit
        if: github.event_name == 'push'
        run: |
          npx commitlint --from HEAD~1 --to HEAD --verbose

      - name: Comment on PR with guidance (on failure)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ‚ùå Commit Message Validation Failed
              
              Your commit messages don't follow the [Conventional Commits](https://www.conventionalcommits.org/) format required for Release Please.
              
              ### Required Format:
              \`\`\`
              <type>(<scope>): <subject>
              
              <body>
              
              <footer>
              \`\`\`
              
              ### Valid Types:
              - \`feat:\` - A new feature (triggers minor version bump)
              - \`fix:\` - A bug fix (triggers patch version bump)
              - \`docs:\` - Documentation only changes
              - \`style:\` - Code style changes (formatting, etc)
              - \`refactor:\` - Code refactoring
              - \`perf:\` - Performance improvements
              - \`test:\` - Adding or updating tests
              - \`build:\` - Build system changes
              - \`ci:\` - CI/CD changes
              - \`chore:\` - Other changes that don't modify src
              
              ### Breaking Changes:
              Add \`BREAKING CHANGE:\` in the footer or \`!\` after type to trigger major version bump:
              \`\`\`
              feat!: remove deprecated API
              
              BREAKING CHANGE: The old API has been removed
              \`\`\`
              
              ### Examples:
              \`\`\`
              feat: add session auto-renewal
              fix: prevent empty session IDs on expired sessions
              docs: update README with session management details
              feat!: change config interface structure
              \`\`\`
              
              Please update your commit messages and force push to this PR.`
            })
